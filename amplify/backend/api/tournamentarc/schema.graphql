type RegisteredUsers @model @auth(rules: [{allow: public}]) {
  id: ID!
  gamerTag: String
  name: String
  location: String
  TournamentBrackets: [TournamentBracket] @connection(keyName: "byRegisteredUsers", fields: ["id"])
}

type GameOnPlatform @model @auth(rules: [{allow: public}]) @key(name: "byGame", fields: ["gameID"]) @key(name: "byPlatform", fields: ["platformID"]) {
  id: ID!
  gameID: ID
  platformID: ID
}

type Platform @model @auth(rules: [{allow: public}]) {
  id: ID!
  platformName: String
  PlatformToGOP: [GameOnPlatform] @connection(keyName: "byPlatform", fields: ["id"])
}

type Game @model @auth(rules: [{allow: public}]) {
  id: ID!
  gameTitle: String
  GameToGOP: [GameOnPlatform] @connection(keyName: "byGame", fields: ["id"])
}

type Controller @model @auth(rules: [{allow: public}]) {
  id: ID!
  controllerName: String
  ControllerToPlatform: Platform @connection
}

type TournamentBracket @model @auth(rules: [{allow: public}]) @key(name: "byTournamentArc", fields: ["tournamentarcID"]) @key(name: "byRegisteredUsers", fields: ["registeredusersID"]) {
  id: ID!
  tournamentarcID: ID
  bracketType: String
  startDate: AWSDateTime
  endDat: AWSDateTime
  registeredusersID: ID
}

type TournamentArc @model @auth(rules: [{allow: public}]) @key(name: "byTournamentEvent", fields: ["tournamenteventID"]) {
  id: ID!
  tournamenteventID: ID
  arcName: String
  description: String
  organizingBody: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  totalPrizeMoney: Float
  ArcToBrackets: [TournamentBracket] @connection(keyName: "byTournamentArc", fields: ["id"])
}

type TournamentEvent @model @auth(rules: [{allow: public}]) {
  id: ID!
  eventName: String
  description: String
  organizingBody: String
  location: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  totalPrizeMoney: Float
  EventToArcs: [TournamentArc] @connection(keyName: "byTournamentEvent", fields: ["id"])
}
 